import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;

/**
 * Class that hold all methods that connect to the database
 */
public class DB {

    private Connection connection;

    /**
     * Method that takes driver details of user and password to pass on a connection
     * @return a connection session to the Database
     */
    public Connection connect() {
        //Connection to the Database
        if (connection == null) {
            try {
                connection = DriverManager.getConnection(
                        "jdbc:mysql://localhost:3306/Poisepms?useSSL=false&allowPublicKeyRetrieval=true",
                        "otheruser",
                        "swordfish"
                );
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        }
        return connection;
    }


    /**
     * Method which takes in a project object and writes those fields into the project table
     * @param project ,  object containing all field values
     * @return the just  created autogenerated project number from project table
     * @throws SQLException
     */
    public int projectSqlInsert(Project project) throws SQLException {
        //SQL query that inserts data into the project table
        String projectSql = "insert into projects(name, type, address, erf, amount_charged, amount_paid, deadline_date" +
                ", completed_date, finalised) values(?,?,?,?,?,?,?,?,?)";
        PreparedStatement preparedStatement = connection.prepareStatement(projectSql, Statement.RETURN_GENERATED_KEYS);
        preparedStatement.setString(1, project.getProjectName());
        preparedStatement.setString(2, project.getProjectType());
        preparedStatement.setString(3, project.getProjectAddress());
        preparedStatement.setString(4, project.getProjectErfNumber());
        preparedStatement.setDouble(5, project.getProjectCostAmount());
        preparedStatement.setDouble(6, project.getProjectPaidAmount());
        preparedStatement.setDate(7, Date.valueOf(project.getProjectDeadline()));
        preparedStatement.setDate(8, Date.valueOf(project.getProjectCompletedDate()));
        preparedStatement.setString(9, project.getProjectFinalized());
        preparedStatement.addBatch();
        preparedStatement.executeBatch();

        //using method to call up the autogenerated project number after previous insert query
        //to be returned and used in the insert query of the person table
        ResultSet resultSet = preparedStatement.getGeneratedKeys();
        int projectNumber = 0;
        while (resultSet.next()) {
            projectNumber = resultSet.getInt(1);
        }
        return projectNumber;
    }


    /**
     * Method which takes in person objects and writes those fields into the person table
     * @param person , object that contains all fields for insertion
     * @param projectNumber , taken from insert into project table
     * @param role , the role type / relationship of the person to the project
     * @throws SQLException
     */
    public void personSqlInsert(Person person, int projectNumber, int role) throws SQLException {
        //SQL query that inserts data into the person table
        String personSql = "INSERT INTO persons(project_number, first_name, last_name, telephone, email, address, " +
                "role_id ) values(?,?,?,?,?,?,?)";
        PreparedStatement preparedStatement = connection.prepareStatement(personSql);
        preparedStatement.setInt(1, projectNumber);
        preparedStatement.setString(2, person.getFirstName());
        preparedStatement.setString(3, person.getLastName());
        preparedStatement.setString(4, person.getTelephone());
        preparedStatement.setString(5, person.getEmail());
        preparedStatement.setString(6, person.getAddress());
        preparedStatement.setInt(7, role);
        preparedStatement.executeUpdate();
    }


    /**
     * Method that returns a Project object with the specified project number
     * @param projectNum the project number that was to be extracted from the database
     * @return a Project object which was retrieved from the Database
     * @throws SQLException
     */
    public Project getProject(int projectNum) throws SQLException {
        //SQL query that calls details from Project table with specific project number
        String query = "SELECT * FROM projects where projects.project_number = " + projectNum + ";";
        Project project = null;

        //setting up to execute query to the connected Database
        Statement statement = connection.createStatement();
        ResultSet results = statement.executeQuery(query);

        //iterating through sql query generated result to separate and assigning the fields
        while (results.next()) {
            // retrieving fields from Project table
            int projectNumber = results.getInt("projects.project_number");
            String projectName = results.getString("projects.name");
            String projectType = results.getString("projects.type");
            String projectAddress = results.getString("projects.address");
            String projectErf = results.getString("projects.erf");
            float projectAmountCharged = results.getFloat("projects.amount_charged");
            float projectAmountPaid = results.getFloat("projects.amount_paid");
            //using pass-through function method for java and sql date incompatibility
            Date projectDeadlineDateSQL = results.getDate("projects.deadline_date");
            LocalDate localDateDeadLineDate = projectDeadlineDateSQL.toLocalDate();
            //using pass-through function method for java and sql date incompatibility
            Date projectCompletedDateSQL = results.getDate("projects.completed_date");
            LocalDate localDateCompletedDate = projectCompletedDateSQL.toLocalDate();
            String projectFinalised = results.getString("projects.finalised");

            //calling getPerson method and saving those fields to a person object
            Person customer = getPerson(projectNumber, 1);
            Person architect = getPerson(projectNumber, 2);
            Person contractor = getPerson(projectNumber, 3);
            Person engineer = getPerson(projectNumber, 4);
            Person manager = getPerson(projectNumber, 5);

            //assigning fields to project object
            project = new Project(projectNumber, projectName, projectType, projectAddress,
                    projectErf, projectAmountCharged, projectAmountPaid, localDateDeadLineDate,
                    projectFinalised, localDateCompletedDate, customer, architect, contractor, engineer, manager);
        }
        return project;
    }


    /**
     * Method which uses the project number and role type and returns a person object with all fields from the database
     * @param projectNum , the selected project number , that persons are belonging to
     * @param role_ID , the role Type / relationship to the project
     * @return , the specified role type of  Person containing all fields
     * @throws SQLException
     */
    public Person getPerson(int projectNum, int role_ID) throws SQLException {
        // creating variable
        Person person = null;

        // SQL query that calls all data from row that has specific project number and designated role ID
        String query = "SELECT * FROM persons where persons.project_number = " + projectNum + " AND persons.role_id = " + role_ID + ";";

        //setting up to execute query to the connected Database
        Statement statement = connection.createStatement();
        ResultSet results = statement.executeQuery(query);

        //iterating through sql query generated result to separate and assigning the fields
        while (results.next()) {
            String firstName = results.getString("persons.first_name");
            String lastName = results.getString("persons.last_name");
            String telephone = results.getString("persons.telephone");
            String email = results.getString("persons.email");
            String address = results.getString("persons.address");

            person = new Person(firstName, lastName, telephone, email, address);
        }
        return person;
    }

    /**
     * Methods that calls (getProject method) which ultimately returns a list of ongoing project objects
     * @return , an array list of Project objects that are still on going
     * @throws SQLException
     */
    public ArrayList<Project> getOngoingProjects() throws SQLException {
        // assigning arrayLists to be used project IDs and Project objects to be looped through as needed
        ArrayList<Integer> ongoingProjectIDs = new ArrayList<Integer>();
        ArrayList<Project> projectArrayList = new ArrayList<Project>();

        // call method that saves an array list if project number of ongoing projects
        ongoingProjectIDs = getOngoingProjectIDs();

        // iterate through the array list of ongoing project numbers , using it to retrieve the full project details
        // and add it a project object array list
        for (int i = 0; i < ongoingProjectIDs.size(); i++) {
            Project project = getProject(ongoingProjectIDs.get(i));
            projectArrayList.add(project);
        }
        return projectArrayList;
    }

    /**
     * Method that goes through the results of an SQl query and returns an array list of project numbers
     * for ongoing Projects
     * @return , an array list of project numbers from ongoing projects
     * @throws SQLException
     */
    public ArrayList<Integer> getOngoingProjectIDs() throws SQLException {
        // assigning arrayLists to be used project IDs and Project objects to be looped through as needed
        ArrayList<Integer> ongoingProjectIDs = new ArrayList<Integer>();

        //Sql query that calls all data from row that has projects that are not finalized
        String query = "SELECT project_number FROM projects where projects.finalised = 'no'";

        //setting up to execute query to the connected Database
        Statement statement = connection.createStatement();
        ResultSet results = statement.executeQuery(query);

        // iterate through sql generated query, and add only the project numbers to an array list
        while (results.next()) {
            ongoingProjectIDs.add(results.getInt("projects.project_number"));
        }
        return ongoingProjectIDs;
    }


    /**
     * Method that goes through the result of an Sql query and returns an array list of project objects
     * passed there due date
     * @return ,an array list of Project objects that are past its due date
     * @throws SQLException
     */
    public ArrayList<Project> getLateProjects() throws SQLException {

        // assigning arrayLists to be used project IDs and Project objects to be looped through as needed
        ArrayList<Integer> lateProjectIDs = new ArrayList<Integer>();
        ArrayList<Project> projectArrayList = new ArrayList<Project>();

        //Sql query that calles all data from rows that projects that are still ongoing but are over due
        String query = "SELECT project_number FROM projects WHERE deadline_date < NOW() AND finalised = 'no';";

        //setting up to execute query to the connected Database
        Statement statement = connection.createStatement();
        ResultSet results = statement.executeQuery(query);

        // iterate through sql generated query, and add only the project numbers to an array list
        while (results.next()) {
            lateProjectIDs.add(results.getInt("projects.project_number"));
        }

        // iterate through the array list of late project numbers , using it to retrieve the full project details
        // and add it a project object array list
        for (int i = 0; i < lateProjectIDs.size(); i++) {
            Project project = getProject(lateProjectIDs.get(i));
            projectArrayList.add(project);
        }
        return projectArrayList;
    }

    /**
     * Method that takes in a project object that has new fields , that needs to be written to the database
     * @param project , the Project object that contains all the new info that needs to edited in the Project tables
     * @param projectNumberSearch ,the specified project number that needs to che changed
     * @throws SQLException
     */
    public void projectSqlUpdate(Project project,int projectNumberSearch) throws SQLException {

        //Sql query that update /changes the user has made for ongoing projects
        String projectSql = "UPDATE projects set name = ?, type = ?, address = ?, erf = ?, amount_charged = ?, " +
                "amount_paid = ?, deadline_date = ?, completed_date = ? where project_number = "+ projectNumberSearch;

        //using the object class statements to insert new project object values to the sql query
        PreparedStatement preparedStatement = connection.prepareStatement(projectSql);
        preparedStatement.setString(1, project.getProjectName());
        preparedStatement.setString(2, project.getProjectType());
        preparedStatement.setString(3, project.getProjectAddress());
        preparedStatement.setString(4, project.getProjectErfNumber());
        preparedStatement.setDouble(5, project.getProjectCostAmount());
        preparedStatement.setDouble(6, project.getProjectPaidAmount());
        preparedStatement.setDate(7, Date.valueOf(project.getProjectDeadline()));
        preparedStatement.setDate(8, Date.valueOf(project.getProjectDeadline()));
        preparedStatement.executeUpdate();
    }

    /**
     * Method that takes the person object that has new fields , that needs to be written to the database
     * @param person , the Person object that has the new fields , that needs to be written to the database
     * @param projectNumberSearch , the specified project number that needs to che changed
     * @param roleType , the role type / relationship of the person to the project
     * @throws SQLException
     */
    public void personSqlUpdate(Person person, int projectNumberSearch, int roleType) throws SQLException {

        //Sql query that updates/ changes the user made for person's related to ongoing projects
        String personSql = "UPDATE persons set first_name = ?, Last_name = ?, telephone = ?, email = ?, " +
                "address = ? WHERE project_number = "+projectNumberSearch+" AND role_id = "+roleType+";";

        //using the object class statements to insert new person object values to the sql query
        PreparedStatement preparedStatement = connection.prepareStatement(personSql);
        preparedStatement.setString(1, person.getFirstName());
        preparedStatement.setString(2, person.getLastName());
        preparedStatement.setString(3, person.getTelephone());
        preparedStatement.setString(4, person.getEmail());
        preparedStatement.setString(5, person.getAddress());
        preparedStatement.executeUpdate();
    }

    /**
     * Method that takes the project number and deleted the project as well as the related persons from the database
     * @param projectNumberToDelete, the specified project number that needs to be deleted
     * @throws SQLException
     */
    public void deleteProject(int projectNumberToDelete) throws SQLException {

        //Sql query that deletes a row in project table based on user supplied project number
        String projectSql = "DELETE from projects WHERE project_number = "+ projectNumberToDelete;
            Statement statement = connection.createStatement();
            statement.executeUpdate(projectSql);

        //loops through values 1 to 5 (being role type) and deletes the people in the person tables related to user
        //selected project number
        for (int i = 0; i < 6; i++){
            String personsSql = "DELETE from persons WHERE project_number = "+projectNumberToDelete+" AND role_id = "+i+";";
            statement = connection.createStatement();
            statement.executeUpdate(personsSql);
        }
    }

    /**
     * Method that updates the completed date and marks project as finalized
     * @param projectNumber , the project number that needs to be finalized
     * @param completedDate , newly entered completed date for a project
     * @throws SQLException
     */
    public void finalizeProject(int projectNumber, LocalDate completedDate) throws SQLException {

        //Sql query that updates completed date and finalized status for user selected project
        String projectSql = "UPDATE projects set completed_date = ?, finalised = ? WHERE project_number = "+projectNumber;

        PreparedStatement preparedStatement = connection.prepareStatement(projectSql);
        preparedStatement.setDate(1, Date.valueOf(completedDate));
        preparedStatement.setString(2,"yes");
        preparedStatement.executeUpdate();
    }

    /**
     * Methods that calls (getProject method) which ultimately returns a list of completed project objects
     * @return , a Project Array List of Completed Project
     * @throws SQLException
     */
    public ArrayList<Project> getCompletedProjects() throws SQLException {

        // assigning arrayLists to be used project IDs and Project objects to be looped through as needed
        ArrayList<Integer> completedProjectIDs = new ArrayList<Integer>();
        ArrayList<Project> projectArrayList = new ArrayList<Project>();
        String query = "select project_number from projects where projects.finalised = 'yes'";

        //setting up to execute query to the connected Database
        Statement statement = connection.createStatement();
        ResultSet results = statement.executeQuery(query);

        // iterate through sql generated query, and add only the project numbers to an array list
        while (results.next()) {
            completedProjectIDs.add(results.getInt("projects.project_number"));
        }

        // iterate through the array list of completed project numbers , using it to retrieve the full project details
        // and add it a project object array list
        for (int i = 0; i < completedProjectIDs.size(); i++) {
            Project project = getProject(completedProjectIDs.get(i));
            projectArrayList.add(project);
        }
        return projectArrayList;
    }
}
